% We start by importing the differential equations which describe the
% system.
type diff_eq

%% TESTING THE DYNAMICS
% The experiment shall last for 30 seconds. This is our timespan. In
% addition, measurements will be taken every 1 ms (corresponds to 30000
% samples/data points).
tspan = linspace(0, 60, 600);
N = max(size(tspan));

% The input signal is defined below
% u = 0.5*square((2*pi*tspan./40) + (pi/2)) + 0.5;
% u = 1;
%u_1 = @(t) heaviside(t);

% Somewhere here, we need the actual parameters...the least squares problem
% requires the response from the system with real parameters (or as real 
% as they can get)...
% Until further notice, do some guesstimates, see how the system reacts
% guesstimate 1: theta(1) = 2, theta(2) = -1000, theta(3) = 2000, theta(4)
% = -9
% guesstimate 2: theta(1) = 0.2, theta(2) = -100, theta(3) = 200, theta(4)
% = -2
% guesstimate 3: theta(1) = 0.025, theta(2) = 0.05, theta(3) = 1, theta(4)
% = 0.4
% guesstimate 4: theta(1) = 0.1394, theta(2) = 0.1766, theta(3) = 1.3288, theta(4) = 0.1021 

% GUESSTIMATE RULES OF THUMB
% 1. The sum of theta(1) and theta(2) must not be larger than 1 (the lower,
% the better).
% 2. Theta(4) must be between 1 and 0.
% 3. Theta(3) must be approximately 1.
% 4. Theta(3) must be larger than theta(1).
theta_real = [0.1394 0.1766 1.3288 0.1021 12];
m0 = [0 0];
soltrue = ode45(@(t, m)diff_eq(t, m, theta_real), tspan, m0);
%soltrue_1 = ode45(@(t, m)diff_eq(t, m, theta_real, u_1(t)), tspan, m0);
m_true = deval(soltrue, tspan);
%m_true_1 = deval(soltrue_1, tspan);
y_true = m_true(1, :);
y_hidden = m_true(2, :);
%y_true_1 = m_true_1(1, :);
%y_hidden_1 = m_true_1(2, :);

%Discrete case
% m_sol = zeros(N, 2);
% m_sol(1, :) = m0;
% phi_real =  [2, 2, 2, 2, 50];
% for i = 2:N
%     m_sol(i, :) = disc_diff_eq(m_sol(i-1, :), phi_real, 0.1, u(tspan(i)));
% end

figure(1)
plot(tspan, y_true);
hold on
plot(tspan, y_hidden);
% plot(tspan, m_sol(:, 1));
% plot(tspan, m_sol(:, 2));
hold off
legend("Active Muscle Mass", "Fatigued Muscle Mass"); %"Forward Euler Active Muscle Mass", "Forward Euler Fatigued Muscle Mass");
xlabel("Time (s)")
ylabel("Mass (kg)")
title("Hand Grip Model Simulation")

% figure(2)
% plot(tspan, y_true_1);
% hold on
% plot(tspan, y_hidden_1);
% hold off
%% LEAST SQUARES ESTIMATOR
% Next, we import the data retrieved from the system testing, as well as
% the starting points. For this we need the filepath where the readings
% are.
FILEPATH = "/Users/admir/Desktop/BIELEKTRO/3. Ã¥r/IELET2920 Bacheloroppgave automatisering/github-repo/IELET2920/python_scripts/data.csv";
readings = readtable(FILEPATH, 'VariableNamingRule', 'preserve');
y_data = readings.Data;

% In order to find the theta-parameters, we need to declare them as
% optimization variables.
theta = optimvar('theta', 5);

% The objective function is the sum of squares of the differences between
% the "real" solution and the data. In order to define the objective
% function, we need to import the function which computes the ODE with the
% parameters
type theta_to_ode

% Now, we express this function as an optimization expression.
%fcnt = @(theta) theta_to_ode(theta, tspan, m0, u);
fcn = fcn2optimexpr(@theta_to_ode, theta, tspan, m0);
%show(fcn)

% Finally, the objective function can be defined.
opt = optimoptions("lsqnonlin", "StepTolerance", 0.0001);
obj = sum((fcn - y_data).^2);

% Now, the optimization problem
prob = optimproblem("Objective", obj);

% Initial guess on theta
theta_0.theta = theta_real;

% Solve the optimization problem
[theta_sol, sumsq] = solve(prob, theta_0, "Options", opt);

disp(theta_sol.theta)
disp(sumsq)

%% PLOT ALL RESULTS
solest = ode45(@(t, m)diff_eq(t, m, theta_sol.theta), tspan, m0);
m_est = deval(solest, tspan);
y_est_active = m_est(1, :);
y_est_hidden = m_est(2, :);

figure(2)
plot(tspan, y_true);
hold on
plot(tspan, y_hidden);
plot(tspan, y_est_active);
plot(tspan, y_est_hidden);
plot(tspan, y_data)
hold off
legend("Active Muscle Mass", "Fatigued Muscle Mass", "Estimated Active Muscle Mass", "Estimated Fatigued Muscle Mass");
xlabel("Time (s)")
ylabel("Mass (kg)")
title("Hand Grip Model Simulation")