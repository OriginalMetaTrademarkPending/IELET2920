% We start by importing the discretized differential equations (via Forward
% Euler)
type disc_diff_eq

% Next, we import the data retrieved from the system testing, as well as
% the starting points. For this we need the filepath where the readings
% are.
<<<<<<< HEAD
FILEPATH = "../../python_scripts/test1.csv";
readings = readtable(FILEPATH, 'VariableNamingRule', 'preserve');
y_data = readings.Data1';
N = max(size(y_data));      %Number of samples to be registered
tspan = 120;                %Time span of the simulation in seconds
=======
FILEPATH = "../../python_scripts/test6.csv";
readings = readtable(FILEPATH, 'VariableNamingRule', 'preserve');
y_data = readings.Data1';
N = max(size(y_data));      %Number of samples to be registered
tspan = 240;                %Time span of the simulation in seconds
M_size = 30;
>>>>>>> e10bbb0 (New parameter estimation changes)
%% INITIALIZING SIMULATION
t_vec = linspace(0, tspan, N);      %Time vector for plotting and input generation

% Defining the phi parameters. These parameters are defined as the theta
% parameters adjusted for the sample time. These parameters must be within
% 0 and 1. The last parameter is the total muscle mass. This parameter does
<<<<<<< HEAD
% not need to be adjusted for the sample time.
phi_first_guess = [0.3, 0.9, 0.79, 0.5, 20];
=======
% not need to be adjusted for the sample time, but will be included as a
% family of different parameters.
phi_first_guess = [0.9989, 0.8874, 0.1982, 0.9992]; 
M = linspace(0, 30, M_size);
% af, 
>>>>>>> e10bbb0 (New parameter estimation changes)

% The input signal is defined below. The function is then run with each
% element.
u_vec = NaN(1, N);
for i = 1:N
    if y_data(i) > 1.0
        u_vec(i) = 1.0;
    else
        u_vec(i) = 0.0;
    end
end

% Initializing the simulation results
<<<<<<< HEAD
mk = NaN(2, N);
mk(:, 1) = zeros(2, 1);

% Running simulation
for i = 2:N
    mk(:, i) = disc_diff_eq(mk(:, i-1), phi_first_guess, u_vec(i-1));
end

% Splitting the results
m_active = mk(1, :);
m_fatig = mk(2, :);

% % Plotting the results
% plot(t_vec, m_active);
% hold on
% plot(t_vec, m_fatig);
% hold off
% legend("Active Muscle Mass", "Fatigued Muscle Mass"); %"Forward Euler Active Muscle Mass", "Forward Euler Fatigued Muscle Mass");
% xlabel("Time (s)")
% ylabel("Mass (kg)")
% title("Hand Grip Model Simulation")
=======
mk = NaN(2, N, M_size);
mk(:, 1, :) = zeros(2, 1, M_size);

% Running simulation
for j = 1:M_size
    for i = 2:N
        mk(:, i, j) = disc_diff_eq(phi_first_guess, mk(:, i-1, j), u_vec(i-1), M(j));
    end
end

% Splitting the results

% Plotting the results
for i = 1:M_size
    figure(1)
    hold on
    plot(t_vec, mk(1, :, i));
    plot(t_vec, mk(2, :, i));
    legend("Active Muscle Mass", "Fatigued Muscle Mass");
    xlabel("Time (s)")
    ylabel("Mass (kg)")
    title("Hand Grip Model Simulation")
end
hold off
>>>>>>> e10bbb0 (New parameter estimation changes)

%% LEAST SQUARES ESTIMATION
% In order to find the theta-parameters, we need to declare them as
% optimization variables.
% The objective function is the sum of squares of the differences between
% the "real" solution and the data. In order to define the objective
% function, we need to import the function which computes the ODE with the
% parameters
type disc_theta_to_ode

<<<<<<< HEAD
phi = optimvar('phi', 5);

% Now, we express this function as an optimization expression.
%fcnt = @(theta) theta_to_ode(theta, tspan, m0, u);
fcn = fcn2optimexpr(@disc_theta_to_ode, phi, N, u_vec);
optim_y = fcn(1, :);

% Finally, the objective function can be defined.
obj = sum((optim_y - y_data).^2);

% Now, the optimization problem
prob = optimproblem("Objective", obj);

%% OPTIMIZATION PROBLEM: CONSTRAINTS
% We find the constraints by performing tr(A)^2 - 4*det(A) on the
% matrices we get by setting u = 0 and u = 1. First, define these matrices
% through optimization variables.
J_0 = [phi(1) - phi(2), 1-phi(4);
    1 - phi(1), phi(4)];

J_1 = [phi(1) - phi(3), 1 - phi(4) - phi(3);
    1 - phi(1), phi(4)];

% Now for the big answer!
prob.Constraints.cons1 = trace(J_0)^2 <= 4*((J_0(1,1)*J_0(2,2)) - (J_0(1,2)*J_0(2,1)));
prob.Constraints.cons2 = trace(J_1)^2 <= 4*((J_1(1,1)*J_1(2,2)) - (J_1(1,2)*J_1(2,1)));
%% OPTIMIZATION PROBLEM: SOLVE
% Initial guess on theta
phi_0.phi = phi_first_guess;

% Solve the optimization problem
[phi_sol, sumsq] = solve(prob, phi_0);

disp(phi_sol.phi)
disp(sumsq)
%% PLOT ALL RESULTS
m_est = NaN(2, N);
m_est(:, 1) = zeros(2, 1);
for i = 2:N
    m_est(:, i) = disc_diff_eq(m_est(:, i-1), phi_sol.phi, u_vec(i));
end
m_est_active = m_est(1, :);
m_est_hidden = m_est(2, :);

figure(2)
plot(t_vec, m_active, '--');
hold on
plot(t_vec, m_fatig, '--');
plot(t_vec, m_est_active);
plot(t_vec, m_est_hidden);
plot(t_vec, y_data);
plot(t_vec, u_vec);
hold off
legend("Active Muscle Mass", "Fatigued Muscle Mass", "Estimated Active Muscle Mass", "Estimated Fatigued Muscle Mass");
xlabel("Time (s)")
ylabel("Mass (kg)")
title("Hand Grip System Identification")
=======
phi = optimvar('phi', 4);

% Now, we express this function as an optimization expression.
%fcnt = @(theta) theta_to_ode(theta, tspan, m0, u);
optim_y = optimexpr(1, N);
sumsq = NaN(M_size);
phi_estims = NaN(M_size, 4);

for i = 1:M_size
    fcn = fcn2optimexpr(@disc_theta_to_ode, phi, N, u_vec, M(i));
    optim_y = fcn(1, :);
    % Finally, the objective function can be defined.
    obj = sum((y_data - optim_y).^2);
    % Now, the optimization problem
    prob = optimproblem("Objective", obj);
    % Initial guess on theta
    phi_0.phi = phi_first_guess;
    % Solve the optimization problem
    [phi_sol, sumsq(i)] = solve(prob, phi_0);
    phi_estims(i, :) = phi_sol.phi;
end
%% PLOT ALL RESULTS
m_est = NaN(2, N, M_size);
m_est(:, 1, :) = zeros(2, 1, M_size);
for j = 1:M_size
    for i = 2:N
        m_est(:, i, j) = disc_diff_eq(phi_estims(j, :), m_est(:, i-1), u_vec(i), M(j));
    end
end

figure(2)
plot(t_vec, y_data);
plot(t_vec, u_vec);
hold on
for i = 1:M_size
    plot(t_vec, mk(1, :, i), '--');
    plot(t_vec, mk(2, :, i), '--');
    plot(t_vec, m_est(1, :, i));
    plot(t_vec, m_est(2, :, i));
    legend("Data", "Input", "Active Muscle Mass", "Fatigued Muscle Mass", "Estimated Active Muscle Mass", "Estimated Fatigued Muscle Mass");
    xlabel("Time (s)")
    ylabel("Mass (kg)")
    title("Hand Grip System Identification")
end
>>>>>>> e10bbb0 (New parameter estimation changes)
